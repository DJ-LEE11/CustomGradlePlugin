4-2节-Groovy变量
def定义弱类型变量

4-3节-Groovy字符串
单引号’String‘
双引号"String"，这种方式可以通过${}扩展
三引号'''String'''

4-5节-逻辑控制
范围定义：def range = 1..9
集合定义：def list = [1,2,3,4,5]
Map定义：def map = ['1':"one", '2':"two"]

循环遍历
for(i in map){
}

4-6节-闭包基础
闭包简单定义：def closer = {println 'groovy'}
闭包调用执行：closer.call() 或 closer()

闭包参数定义：def closer = {str1,str2 -> println str1 + str2}
closer('groovy','hello')

每个闭包都包含一个默认隐藏参数it：def closer = {print "hello ${it}"}
closer('groovy')

闭包一定有返回值，是最后一行的值，比如
def closer = {println 'groovy'}，closer的值为null

4-8节-闭包中String使用
def str = "String 1 Groovy"
String的遍历
str.each{
    println it
}

String中查找符号条件的字符
println str.find {
    it.isNumber()
}
打印结果为1

4-9节-闭包进阶
闭包的三个重要变量
this：代表闭包定义处的类。
owner：代表闭包定义处最近的类。
delegate：不特别指定的话，和owner一致。
大多数情况下，这三个变量所指向的是同一个对象，
当闭包嵌套闭包时，会不一样。
Class Test{}
def test = new Test()
def ACloser = {
       def BCloser = {
           println this
           println owner
           println delegate
       }
       BCloser.delegate = test
       BCloser()
}
ACloser()
以上这种情况下，this代表ACloser，owner代表BCloser，delegate代表Test。

4-10节-列表创建
list集合创建
def list = [] //空集合
def list = [1,2,3,4]

数组创建
def array = [1,2,3,4] as int[]
int[] array = [1,2,3,4]

4-11节-列表操作
def list = [3,2,1,4]
列表添加
list.add(i)
list << i
列表排序
list.sort {def item1 , def item2 ->
    return item1>item2
}
列表查找
list.find{
  return Boolean
}

4-12节-映射map
map定义，注意key必须是字符串
def map = ['a':1 , 'b':2]
获取value
map['a']、map.a
添加元素
map.c = 3

4-13节-映射map操作
map遍历
map.each{
    println it.key + it.value
}
map索引遍历
map.eachWithIndex{ def entry , int index->
    println entry.key + entry.value
}
map查找
map.find {
    return Boolean
}
map分组
map.groupBy {
    return Boolean
}
map排序
map.sort { def entry1 ,def entry2 ->
   return entry1.value > entry2.value
}

4-14节-范围
def range = 1..10
获取某个值
range[0]

4-15节-面向对象
class People{
    int age
}
对象的创建
def p = new People(age:10)
为一个类动态添加一个属性
People.metaClass.name = 'Tony'
println new People().name
为一个类动态添加方法
People.metaClass.getFun = { def var->
    println var
}
new People().getFun('groovy')

5-2节-json操作
将实体对象转换成Json字符串
def jsonStr = JsonOutput.toJson(Object)
格式化处理
JsonOutput.prettyPrint(jsonStr)
将json字符串转换成对象
def object = new JsonSlurper().parse()

//从网络下载json文件并解析
def getNetworkData(String url){
    //发送http请求
    def connection = new URL(url).openConnection()
    connection.connect()
    def response = connection.content.text
    return new JsonSlurper().parseText(response)
}

5-3节-xml文件处理
解析一个xml文件
def xmlSlurper = new XmlSlurper().parse(file)

5-5节-文件处理
def file = new File(path)
文件内容遍历
file.eachLine { line ->
    println line
}
获取文件内容
println file.getText()
获取文件每一行的内容并返回list
def fileList = file.readLines()

//拷贝文件
def copy(String sourcePath, String destinationPath) {
    try {
        //检查源文件是否存在
        def sourceFile = new File(sourcePath)
        if (!sourceFile.exists()) {
            return false
        }
        //创建目标文件
        def destinationFile = new File(destinationPath)
        if (!destinationFile.exists()) {
            destinationFile.createNewFile()
        }
        //开始copy，首先先读源文件，然后再写到目标文件中
        sourceFile.withReader { reader ->
            def lines = reader.readLines()
            destinationFile.withWriter {writer ->
                lines.each {
                    writer.append(it + "\r\n")
                }
            }
        }
    } catch (Exception e) {
        println e.printStackTrace()
        return false
    }
    return true
}

println copy("./app/src/main/AndroidManifest.xml",
        "./app/src/main/AndroidManifest2.xml")

5-6节-文件处理
保存对象到一个文件中
def saveObject(Object obj, String destinationPath) {
    try {
        def destinationFile = new File(destinationPath)
        if (!destinationFile.exists()) {
            destinationFile.createNewFile()
        }
        destinationFile.withObjectOutputStream {
            it.writeObject(obj)
        }
    } catch (Exception e) {
        println e.printStackTrace()
        return false
    }
    return true
}

6-1节-gradle
gradle是构建编程框架

6-3节-gradle生命周期间监听
//当前project配置阶段开始前的回调监听
this.beforeEvaluate {
}

//当前project配置阶段完成以后的回调监听
this.afterEvaluate {
}

/project执行前的回调，如果在根build.gradle使用，所有子build.gradle都能监听
this.gradle.beforeProject {
}

//project执行后的回调，如果在根build.gradle使用，所有子build.gradle都能监听
this.gradle.afterProject {
}

//gradle执行完毕后的回调
this.gradle.buildFinished {
}

7-1节-project
project的标志是build.gradle文件

7-3节-project api
获取所有的project
project.getAllProjects()
获取所有子project
project.getSubProjects()
获取父project
project.getParentProjects()
获取根project
project.getRootProjects()

7-4节-project api
父project可以直接获取操作子app project
project('app'){ Project project ->
    apply plugin: 'com.android.application'
    android{
    }
    dependencies{
    }
    println project.name
}

当前和所有子Project统一配置
allProjects{
}

所有子Project统一配置
subProjects{Project project ->
    if(project.plugins.hasPlugin('com.android.library')){
        apply from: '......'
    }
}

7-5节-project扩展属性一
根project定义扩展属性
ext{
    groovyVersion = 25
    android = [
        javaVersion : 1.0
    ]
}

根project调用某个扩展属性
this.ext.android['javaVersion']

子project调用父project的某个扩展属性
this.ext.android['javaVersion']或rootProject.ext.android['javaVersion']
注意，父project的扩展属性会被子project继承，所以子project也能直接使用。

7-6节-project扩展属性二
gradle.properties文件只支持key-value扩展属性

7-7节-文件路径api
获取根工程文件路径
println getRootDir().absolutePath
获取当前工程build文件路径
println getBuildDir().absolutePath
获取当前工程文件路径
println getProjectDir().absolutePath

获取相对于当前project中的某一个文件
def getFileContent(String path) {
    try {
        def file = file(path)
        println file.text
    } catch(GradleException e) {
        println '文件找不到'
    }
}
getFileContent('build.gradle')

文件拷贝
将app目录下的apk文件夹包拷贝到根目录的build包下
copy{
    from file('build/outputs/apk/')
    into getRootProject().getBuildDir().path +'/apk/'
    //可以进行文件过滤
    exclude{}
    //可以进行文件重命名
    rename{}
}

对文件树进行遍历
fileTree('build/kotlin/') { FileTree fileTree ->
    fileTree.visit { FileTreeElement element ->
        println element.path
        //拷贝到跟工程的test文件中
        copy {
            from element.file
            into getRootProject().getBuildDir().path+'/test/'
        }
    }
}

7-8节-依赖操作api
//gradle配置阶段用到的插件配置
buildscript {
    //配置工程的仓库地址
    repositories {
        jcenter()
        mavenCentral()
        //私有仓库配置
        maven {
            name 'pluginName'
            url 'https://plugins.gradle/'
        }
    }
    //配置工程的插件依赖地址
    dependencies {
        classpath 'com.android.gradle:1.0'
    }
}

//project闭包中的dependencies则是为程序添加第三方库依赖
dependencies {
    //依赖方式一，依赖本地的jar包或lib包
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //依赖方式二，依赖本地的module模块
    implementation project(':common')
    //依赖方式三、依赖远程第三方库
    implementation "androidx.room:room-ktx:2.0.0"
    //依赖冲突处理
    implementation "androidx.room:room-rxjava2:2.0.0" {
        exclude xxxxx
    }
}

7-9节-外部命令
//将生成的apk包移动到桌面
task(name: 'apkCopy') {
    doLast {
        def sourcePath = this.buildDir.path + '/outputs/apk'
        def destinationPath = '桌面地址url'
        //这个是系统移动文件的命令
        def command = "mv -f ${sourcePath} ${destinationPath}"
        //下面这个执行命令的闭包是固定写法
        exec {
            try {
                executable 'bash'
                args '-c', command
            } catch (GradleException e) {
                e.printStackTrace()
            }
        }
    }
}

最后在控制台通过命令执行任务即可
gradlew apkCopy

8-2节-Task定义
//task创建一
task testTask(group: 'test' , description: 'this is testTask'){
    println 'testTask'
}
//task创建二
this.tasks.create(name:'testTask'){
    //配置
    setGroup('test')
    setDescription('this is testTask')
}

8-3节-task执行
//只有task能在执行阶段执行，通过doFirst、doLast实现
//统计build执行阶段的耗时
def startBuildTime, endBuildTime
this.afterEvaluate { Project project ->
    //找到在build执行最开始的task
    def preBuildTask = project.tasks.getByName('preBuild')
    preBuildTask.doFirst {
        startBuildTime  = System.currentTimeMillis()
        println 'the start time is '+startBuildTime
    }
    //build执行最后的task
    def buildTask = project.tasks.getByName('build')
    buildTask.doLast {
        endBuildTime = System.currentTimeMillis()
        println "the build time is ${endBuildTime - startBuildTime}"
    }
}
//最后执行命令 gradlew build

8-5节-task执行顺序
task task1 {
    //注意这条打印语句只会出现在配置阶段，不会在执行阶段执行
    println('task1')
    doFirst {
        println('task1 doFirst')
    }
}

task task2 {
    doFirst {
        println('task2 doFirst')
    }
}

//执行task3之前会先执行所依赖的task1和task2，这种情况下task1和task2的顺序是随机的
task task3(dependsOn: [task1, task2]) {
    doFirst {
        println('task3 doFirst')
    }
}

task task4{
    //依赖当前project中所有lib开头的task
    dependsOn this.tasks.findAll {task->
        return task.name.startsWith("lib")
    }
    doFirst {
        println('task4 doFirst')
    }
}

task lib1 {

    doFirst {
        println('lib1 doFirst')
    }
}

task lib2{
    doFirst {
        println('lib2')
    }
}

//设置task执行的优先级(A在B后执行)
A.dependsOn B -->   执行A的时候先执行B (还没声明出来的 task 要加 "")
A.mustRunAfter B  -->   同时执行 A/B，先执行B在执行A，若执行关系不成立报错
A.shouldRunAfter B  -->   同 mustRunAfter，但是执行关系不成立不会报错


//系统默认Task,比如 copy、delete
task speak (type: Copy) {
    ...
}
或者
Copy{
}

参与项目构建的第三方代码叫 --> 插件
参与代码逻辑的第三方代码叫 --> 依赖

Gradle构建分的三个阶段
Initialization  --> 初始化阶段。按顺序执行 init.gradle -> settings.gradle 脚本，生成 Gradle、Setting、Project 对象
Configuration --> 编译阶段，也叫配置阶段。按顺序执行 root build.gradle -> 子项目 build.gradle 脚本，生成 Task 执行流程图
Execution --> 执行阶段。按照 Task 执行图顺序运行每一个 Task，完成一个个步奏，生成最终 APK 文件


init.gradle 脚本编译完了会生成 Gradle 对象
settings.gradle 脚本编译完了会生成 Setting 对象
build.gradle 脚本编译完了会生成 Project 对象


从Hook函数作用的目标角度分类：
一种专门监听脚本的执行，比如 beforeEvaluated 就是
一种专门监听项目的执行，比如 beforeProject，gradle.allProject() 可以对所有项目对象进行操作
一种专门监听 task 的执行，比如 gradle.taskGraph.whenReady()

在setting.gradle脚步可设置的hook回调函数==========》
gradle.beforeSettings {
    //注意写在这里不会回调，因为这里settings.gradle已经执行了
    println("settings gradle.beforeSettings settings.gradle 解析前回调")
}

gradle.settingsEvaluated {
    println("settings gradle.settingsEvaluated settings.gradle 解析完成回调")
}

gradle.projectsLoaded {
    println("settings gradle.projectsLoaded 初始化阶段结束回调")
}

gradle.beforeProject {
    println("settings gradle.beforeProject 每个项目执行前回调")
}

gradle.afterProject {
    println("settings gradle.afterProject 每个项目执行结束回调")
}

//对所有项目脚本进行监听
gradle.allprojects(new Action<Project>() {
    @Override
    void execute(Project project) {
        project.beforeEvaluate {
            println("settings gradle.allprojects.beforeEvaluate build.gradle解析前回调")
        }
        project.afterEvaluate {
            println("settings gradle.allprojects.afterEvaluate build.gradle解析结束回调")
        }
    }
})

gradle.projectsEvaluated {
    println("settings gradle.projectsEvaluated 配置阶段结束回调")
}

gradle.taskGraph.whenReady {
    println("settings gradle.taskGraph.whenReady task有向无环图生成回调")
}

gradle.buildFinished {
    println("settings gradle.buildFinished 构建过程结束回调")
}

在子项目build.gradle脚步可设置的hook回调函数==========》
project.beforeEvaluate {
    //注意写在这里不会回调，因为这里子build.gradle已经执行了
    println("project project.beforeEvaluate build.gradle解析前回调")
}

project.afterEvaluate {
    println("project project.afterEvaluate build.gradle解析结束后回调")
}

Listener类型的可设置的hook回调函数==========》

//Hook执行阶段的所有任务，这个监听既可以放在setting.gradle文件中，又可以放在build.gradle中
gradle.addListener(new TaskExecutionGraphListener() {
    @Override
    void graphPopulated(TaskExecutionGraph taskExecutionGraph) {
        taskExecutionGraph.getAllTasks().each {
            //配置阶段结束后，到有向无环图生成前，会打印所有的task
            println("graphPopulated 11111 ${it.name}")
            it.doFirst {
                //执行阶段会在该任务执行前调用
                println("graphPopulated doFirst ${it.name}")
            }

            it.doLast {
                println("graphPopulated doLast ${it.name}")
            }
            //hook执行阶段的某一个任务
            if (it.name == "generateDebugBuildConfig"){
                it.doFirst {
                    println("graphPopulated hook ${it.name}")
                }
            }
        }
    }
})

//Hook执行阶段的所有任务，这个监听不能放在setting.gradle文件中，此时tasks还没生成
tasks.whenTaskAdded { org.gradle.api.Task task ->
    //当前build.gradle脚本解析结束后会打印所有的task
    println("whenTaskAdded 11111 ${task.name}")
    if (task.name == "assembleDebug") {
        task.doFirst {
            println " whenTaskAdded hook assembleDebug task before"
        }
        task.doLast {
            println "whenTaskAdded hook assembleDebug task after"
        }
    }
}

//Hook执行阶段的某一个任务方法一
task hookTask() {
    doLast {
        println 'hook某一个task'
    }
}

project.afterEvaluate {
    //hookTask任务的执行时机在generateDebugAssets和assembleDebug之间
    hookTask.dependsOn generateDebugAssets
    assembleDebug.dependsOn hookTask
}

//hook执行阶段的某一个任务方法二
this.afterEvaluate {project ->
    def preBuildTask = project.tasks.getByName("preBuild")
    preBuildTask.doFirst {
        println("afterEvaluate hook ${it.name}")
    }
}

//Hook变体的task
this.afterEvaluate {
    this.android.applicationVariants.all {variant ->
        println "applicationVariants name = ${variant.name} , baseName: ${variant.baseName}"
        def task = variant.checkManifest
        println "applicationVariants taskName = ${task.name}"
        task.doFirst {
            println "applicationVariants doFirst taskName = ${task.name}"
        }
    }
}

Gradle编译性能分析相关命令：
 ./gradlew assembleDebug --profile
编译完成后，可以在控制台看到生成HTML格式的分析文件的路径

通过buildSrc目录编写的插件开发效率比较高，注意以下四点注意事项
1、buildSrc目录是gradle默认的构建目录，该目录下的代码会在构建时自动地进行编译打包。
2、会被添加到buildScript中的classpath下，不需要任何额外的配置就可以直接被其他模块中的gradle脚本引用。
3、buildSrc的执行时机早于settings.gradle，因此需要在build.gradle中添加仓库
4、settings.gradle中如果配置了 ':buildSrc'，buildSrc⽬录就会被当做是子Project，会被执行两遍。

Gradle提供的Transform API可以在打包成.dex文件之前对.class文件进行操作(编译插桩)。

编译插桩开发流程
1、自定义一个Gradle插件，然后创建并注册一个Transform对象。
2、在Transform对象中重写transform方法。
3、在transform方法中根据入参遍历项目目录和jar包，从未获取所有的.class文件。
4、利用ASM框架的Core API去加载并解析的.class文件和相关的方法，最后修改相应的方法。

