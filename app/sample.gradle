println 'sample.gradle start gradle 相关示例 ===========================================> \n'


task CheckImage() {
    println 'task testCheck() 执行检测项目中所有图片的前缀'
    def before = System.currentTimeMillis()
    def isValue = true
    def count = 0
    fileTree(rootDir) { FileTree fileTree ->
        fileTree.visit { FileTreeElement element ->
            def pathName = element.file.name
            if (pathName.endsWith("png") || pathName.endsWith("jpg") || pathName.endsWith("jpeg")) {
                if (!element.name.startsWith("bdg")) {
                    if (count == 2) {
                        return
                    }
                    count = count + 1
                    println '当前图片前缀不是bdg ， ：' + element.file.name
                    isValue = false
                }
            }
        }
    }
//    if (!isValue) {
//        throw new GradleException('检测不通过')
//    }
    def after = System.currentTimeMillis() - before
    println 'task testCheck() 检测耗时 ：' + after + "\n"
}

//Hook执行阶段的所有任务，这个监听只能放在build.gradle中
tasks.whenTaskAdded { org.gradle.api.Task task ->
    //当前build.gradle脚本解析结束后会打印所有的task
//    println("whenTaskAdded 11111 ${task.name}")
    if (task.name == "assembleDebug") {
        task.doFirst {
            println " whenTaskAdded hook assembleDebug task before"
        }
        task.doLast {
            println "whenTaskAdded hook assembleDebug task after"
        }
    }
}

task hookTask() {
    doLast {
        println 'hook某一个task'
    }
}

afterEvaluate {
    //hookTask任务的执行时机在generateDebugAssets和assembleDebug之间
    hookTask.dependsOn generateDebugAssets
    assembleDebug.dependsOn hookTask
}

this.afterEvaluate {project ->
    def preBuildTask = project.tasks.getByName("preBuild")
    preBuildTask.doFirst {
        println("afterEvaluate hook ${it.name}")
    }
}

//Hook变体的task
this.afterEvaluate {
    this.android.applicationVariants.all {variant ->
        println "applicationVariants name = ${variant.name} , baseName: ${variant.baseName}"
        def task = variant.checkManifest
        println "applicationVariants taskName = ${task.name}"
        task.doFirst {
            println "applicationVariants doFirst taskName = ${task.name}"
        }
    }
}




